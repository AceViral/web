{"version":3,"sources":["../node_modules/clsx/dist/clsx.m.js","components/Dialogs/Dialogs.module.scss","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["toVal","mix","k","y","str","Array","isArray","length","tmp","x","i","arguments","module","exports","DialogItemCopy","props","to","id","className","s","block","activeClassName","active","imgbx","src","userPhoto","alt","details","listHead","name","message_p","MessageCopy","console","log","class","clsx","message","isFriend","friend_message","my_message","text","AddMessageForm","initialValues","chatBox_input","color","component","onChange","onNewMessageChange","value","newMessageBody","placeholder","autocomplete","onClick","onSendMessageClick","type","DialogsCopy","profile","React","useState","searchValue","setSearchValue","state","dialogsPage","isAuth","container","leftSide","header","userImg","photos","large","login","searchChat","event","target","chatList","dialogs","filter","dialog","toLowerCase","includes","map","DialogItem","rightSide","path","userName","find","Number","match","params","friendsMessagesElements","messages","Message","myMessageElements","imgText","chatBox","chatBoxInLoad","e","body","updateNewMessageBody","onSendMessage","compose","connect","profilePage","auth","withAuthRedirect","Dialogs"],"mappings":"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","file":"static/js/3.5b2c8dbd.chunk.js","sourcesContent":["function toVal(mix) {\n\tvar k, y, str='';\n\n\tif (typeof mix === 'string' || typeof mix === 'number') {\n\t\tstr += mix;\n\t} else if (typeof mix === 'object') {\n\t\tif (Array.isArray(mix)) {\n\t\t\tfor (k=0; k < mix.length; k++) {\n\t\t\t\tif (mix[k]) {\n\t\t\t\t\tif (y = toVal(mix[k])) {\n\t\t\t\t\t\tstr && (str += ' ');\n\t\t\t\t\t\tstr += y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor (k in mix) {\n\t\t\t\tif (mix[k]) {\n\t\t\t\t\tstr && (str += ' ');\n\t\t\t\t\tstr += k;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn str;\n}\n\nexport default function () {\n\tvar i=0, tmp, x, str='';\n\twhile (i < arguments.length) {\n\t\tif (tmp = arguments[i++]) {\n\t\t\tif (x = toVal(tmp)) {\n\t\t\t\tstr && (str += ' ');\n\t\t\t\tstr += x\n\t\t\t}\n\t\t}\n\t}\n\treturn str;\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Dialogs_container__PIl5T\",\"leftSide\":\"Dialogs_leftSide__2AlnD\",\"header\":\"Dialogs_header__10LJQ\",\"userImg\":\"Dialogs_userImg__2YujI\",\"searchChat\":\"Dialogs_searchChat__1ZNdG\",\"chatList\":\"Dialogs_chatList__3Pni9\",\"block\":\"Dialogs_block__3Xr42\",\"imgbx\":\"Dialogs_imgbx__1fH_K\",\"details\":\"Dialogs_details__2FFxE\",\"listHead\":\"Dialogs_listHead__3ChFC\",\"message_p\":\"Dialogs_message_p__3cmb1\",\"active\":\"Dialogs_active__1piie\",\"rightSide\":\"Dialogs_rightSide__3B5_L\",\"imgText\":\"Dialogs_imgText__N70s8\",\"chatBox\":\"Dialogs_chatBox__2A8oR\",\"chatBoxInLoad\":\"Dialogs_chatBoxInLoad__1pHw4\",\"message\":\"Dialogs_message__38U9-\",\"my_message\":\"Dialogs_my_message__3YhT6\",\"friend_message\":\"Dialogs_friend_message__1JBwq\",\"chatBox_input\":\"Dialogs_chatBox_input__3bagC\"};","import React from \"react\";\r\nimport userPhoto from \"../../../assets/images/person.png\";\r\nimport s from \"../Dialogs.module.scss\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst DialogItemCopy = (props) => {\r\n   return (\r\n      <NavLink\r\n         to={\"/dialogs/\" + props.id}\r\n         className={s.block}\r\n         activeClassName={s.active}\r\n      >\r\n         <div className={s.imgbx}>\r\n            <img src={userPhoto} alt=\"userPhoto\" />\r\n         </div>\r\n         <div className={s.details}>\r\n            <div className={s.listHead}>\r\n               <h4>{props.name}</h4>\r\n            </div>\r\n            <div className={s.message_p}>\r\n               <p></p>\r\n            </div>\r\n         </div>\r\n      </NavLink>\r\n   );\r\n};\r\n\r\nexport default DialogItemCopy;\r\n","import s from \"../Dialogs.module.scss\";\r\nimport clsx from \"clsx\";\r\n\r\nconst MessageCopy = (props) => {\r\n   console.log(props.class);\r\n   return (\r\n      <div\r\n         className={clsx(\r\n            s.message,\r\n            props.isFriend ? s.friend_message : s.my_message\r\n         )}\r\n      >\r\n         <p>{props.text}</p>\r\n      </div>\r\n   );\r\n};\r\n\r\nexport default MessageCopy;\r\n","import s from \"./Dialogs.module.scss\";\r\nimport React from \"react\";\r\nimport userPhoto from \"../../assets/images/person.png\";\r\nimport \"boxicons\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport { Redirect, Route, Switch } from \"react-router-dom\";\r\nimport MessageCopy from \"./Message/Message\";\r\nimport { Field, Form, Formik } from \"formik\";\r\nimport clsx from \"clsx\";\r\n\r\nconst DialogsCopy = (props) => {\r\n   console.log(props.profile);\r\n   // Input\r\n   const [searchValue, setSearchValue] = React.useState(\"\");\r\n   const onChangeSearchInput = (event) => {\r\n      setSearchValue(event.target.value);\r\n   };\r\n   //\r\n   const state = props.dialogsPage;\r\n   // Create message\r\n   const newMessageBody = state.newMessageBody;\r\n   const onSendMessageClick = () => {\r\n      props.onSendMessage();\r\n   };\r\n   const onNewMessageChange = (e) => {\r\n      let body = e.target.value;\r\n      props.updateNewMessageBody(body);\r\n   };\r\n   // Redirect\r\n   if (!props.isAuth) return <Redirect to={\"/login\"} />;\r\n   // Create a dialogs\r\n   const renderItems = () => {\r\n      return state.dialogs\r\n         .filter((dialog) =>\r\n            dialog.name.toLowerCase().includes(searchValue.toLowerCase())\r\n         )\r\n         .map((dialog) => (\r\n            <DialogItem name={dialog.name} key={dialog.id} id={dialog.id} />\r\n         ));\r\n   };\r\n   return (\r\n      <div className={s.container}>\r\n         <div className={s.leftSide}>\r\n            <div className={s.header}>\r\n               <div className={s.userImg}>\r\n                  <img src={props.profile.photos.large} alt=\"\" />\r\n               </div>\r\n               <h3>{props.login}</h3>\r\n            </div>\r\n            <div className={s.searchChat}>\r\n               <div>\r\n                  <input\r\n                     type=\"text\"\r\n                     placeholder=\"Search or start new Chat\"\r\n                     value={searchValue}\r\n                     onChange={onChangeSearchInput}\r\n                  />\r\n                  <box-icon name=\"search-alt\" color=\"#61dbfb\"></box-icon>\r\n               </div>\r\n            </div>\r\n            <div className={s.chatList}>{renderItems()}</div>\r\n         </div>\r\n\r\n         <div className={s.rightSide}>\r\n            <Switch>\r\n               <Route\r\n                  path={`/dialogs/:id`}\r\n                  component={(props) => {\r\n                     const userName = state.dialogs.find(\r\n                        (dialog) =>\r\n                           Number(dialog.id) === Number(props.match.params.id)\r\n                     ).name;\r\n                     const friendsMessagesElements = state.dialogs\r\n                        .find(\r\n                           (dialog) =>\r\n                              Number(dialog.id) ===\r\n                              Number(props.match.params.id)\r\n                        )\r\n                        .messages.map((message) => (\r\n                           <MessageCopy\r\n                              text={message.message}\r\n                              key={message.id}\r\n                              id={message.id}\r\n                              isFriend={true}\r\n                           />\r\n                        ));\r\n                     const myMessageElements = state.messages.map((message) => (\r\n                        <MessageCopy\r\n                           text={message.message}\r\n                           key={message.id}\r\n                           id={message.id}\r\n                           isFriend={false}\r\n                        />\r\n                     ));\r\n                     return (\r\n                        <>\r\n                           <div className={s.header}>\r\n                              <div className={s.imgText}>\r\n                                 <div className={s.userImg}>\r\n                                    <img src={userPhoto} alt=\"\" />\r\n                                 </div>\r\n                                 <h4>{userName}</h4>\r\n                              </div>\r\n                           </div>\r\n                           <div className={s.chatBox}>\r\n                              {friendsMessagesElements}\r\n                              {myMessageElements}\r\n                           </div>\r\n                        </>\r\n                     );\r\n                  }}\r\n               />\r\n               <Route\r\n                  path=\"/dialogs\"\r\n                  component={() => {\r\n                     return (\r\n                        <div>\r\n                           {\" \"}\r\n                           <div className={s.header}></div>\r\n                           <div className={clsx(s.chatBox, s.chatBoxInLoad)}>\r\n                              <div>\r\n                                 <box-icon\r\n                                    name=\"message-square-add\"\r\n                                    color=\"#61dbfb\"\r\n                                 ></box-icon>\r\n                                 <h3>Start a new chat</h3>\r\n                              </div>\r\n                           </div>\r\n                        </div>\r\n                     );\r\n                  }}\r\n               />\r\n            </Switch>\r\n            <AddMessageForm\r\n               onNewMessageChange={onNewMessageChange}\r\n               newMessageBody={newMessageBody}\r\n               onSendMessageClick={onSendMessageClick}\r\n            />\r\n         </div>\r\n      </div>\r\n   );\r\n};\r\nconst AddMessageForm = (props) => {\r\n   return (\r\n      <Formik initialValues={{ message: \"\" }}>\r\n         <Form>\r\n            <div className={s.chatBox_input}>\r\n               <box-icon name=\"wink-smile\" color=\"#61dbfb\"></box-icon>\r\n               <box-icon name=\"paperclip\" color=\"#61dbfb\"></box-icon>\r\n               <Field\r\n                  component=\"input\"\r\n                  onChange={props.onNewMessageChange}\r\n                  value={props.newMessageBody}\r\n                  name={\"message\"}\r\n                  placeholder=\"Type a message\"\r\n                  autocomplete=\"off\"\r\n               ></Field>\r\n               <box-icon\r\n                  name=\"send\"\r\n                  color=\"#61dbfb\"\r\n                  onClick={props.newMessageBody && props.onSendMessageClick}\r\n                  type=\"submit\"\r\n               ></box-icon>\r\n            </div>\r\n         </Form>\r\n      </Formik>\r\n   );\r\n};\r\nexport default DialogsCopy;\r\n","import {\r\n   onSendMessage,\r\n   updateNewMessageBody,\r\n} from \"../../redux/dialogs-reducer\";\r\nimport { connect } from \"react-redux\";\r\nimport { withAuthRedirect } from \"../../hoc/AuthRedirect\";\r\nimport Dialogs from \"./Dialogs.jsx\";\r\nimport { compose } from \"redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n   return {\r\n      dialogsPage: state.dialogsPage,\r\n      profile: state.profilePage.profile,\r\n      login: state.auth.login,\r\n   };\r\n};\r\n\r\nexport default compose(\r\n   connect(mapStateToProps, { updateNewMessageBody, onSendMessage }),\r\n   withAuthRedirect\r\n)(Dialogs);\r\n"],"sourceRoot":""}